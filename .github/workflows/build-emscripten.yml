name: Build Emscripten Bindings

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-emscripten:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Emscripten
      uses: mymindstorm/setup-emsdk@v14
      with:
        version: 'latest'
        actions-cache-folder: 'emsdk-cache'
        
    - name: Verify Emscripten
      run: emcc -v
      
    - name: Build Emscripten Module
      run: |
        mkdir -p build-emscripten
        cd build-emscripten
        emcmake cmake .. -DEMSCRIPTEN=ON -DLGPL=ON
        emmake make -j4 VERBOSE=1
        
    - name: Debug generated files
      run: |
        cd build-emscripten
        echo "=== Generated files ==="
        ls -la
        echo "=== File sizes ==="
        du -h cdt.* || du -h cdt.js
        echo "=== JS file head (first 100 lines) ==="
        head -100 cdt.js
        echo "=== JS file tail (last 100 lines) ==="
        tail -100 cdt.js
        echo "=== Search for binding-related terms ==="
        grep -n "EMSCRIPTEN_BINDINGS\|computeCDT\|testFunction\|function" cdt.js | head -20
        
    - name: Test generated JavaScript
      run: |
        cd build-emscripten
        # Create package.json to enable ES modules
        echo '{"type": "module"}' > package.json
        cat > test_module.mjs << 'EOF'
        import fs from 'fs';
        
        async function testModule() {
          if (fs.existsSync('cdt.js')) {
            console.log('✓ cdt.js generated successfully');
            const content = fs.readFileSync('cdt.js', 'utf8');
            
            // Check for function name in the source (basic check)
            if (content.includes('computeCDT')) {
              console.log('✓ computeCDT function found in generated JS source');
            } else {
              console.log('! computeCDT string not found in source (may be minified)');
            }
            
            // Try to actually load and use the module
            try {
              // Try ES6 import 
              const module = await import('./cdt.js');
              const CDTFactory = module.default;
              
              if (typeof CDTFactory !== 'function') {
                console.log('✗ CDTFactory is not a function, got:', typeof CDTFactory);
                console.log('Module keys:', Object.keys(module));
                return false;
              }
              
              console.log('✓ Module loaded as ES6 module with default export');
              
              // Initialize the WebAssembly module
              const CDT = await CDTFactory();
              console.log('✓ WebAssembly module initialized successfully');
              console.log('Module exports:', Object.keys(CDT));
              
              // Test simple function first
              if (typeof CDT.testFunction === 'function') {
                console.log('✓ testFunction is available');
                const testResult = CDT.testFunction(3, 4);
                console.log('testFunction(3, 4) =', testResult);
              } else {
                console.log('✗ testFunction not found');
              }
              
              // Check if the function is available on the module
              if (typeof CDT.computeCDT === 'function') {
                console.log('✓ computeCDT function is available');
                return true;
              } else {
                console.log('✗ computeCDT function not found on module');
                console.log('Available functions:', Object.keys(CDT).filter(k => typeof CDT[k] === 'function'));
                return false;
              }
            } catch (error) {
              console.log('✗ Failed to load/initialize module:', error.message);
              return false;
            }
          } else {
            console.log('✗ cdt.js not found');
            return false;
          }
        }
        
        testModule().then(success => {
          process.exit(success ? 0 : 1);
        }).catch(error => {
          console.log('✗ Test failed:', error.message);
          process.exit(1);
        });
        EOF
        node test_module.mjs
        
    - name: Create distribution package
      run: |
        mkdir -p dist
        cp build-emscripten/cdt.js dist/
        # Copy wasm file only if it exists (not in single-file mode)
        if [ -f build-emscripten/cdt.wasm ]; then
          cp build-emscripten/cdt.wasm dist/
        fi
        cp cdt.d.ts dist/
        cp README_WASM.md dist/README.md
        
        # Create package.json for the distribution
        if [ -f build-emscripten/cdt.wasm ]; then
          # Separate WASM file mode
          FILES_ARRAY='["cdt.js", "cdt.wasm", "cdt.d.ts", "README.md", "index.html"]'
        else
          # Single file mode (WASM embedded in JS)
          FILES_ARRAY='["cdt.js", "cdt.d.ts", "README.md", "index.html"]'
        fi
        
        cat > dist/package.json << EOF
        {
          "name": "cdt-wasm",
          "version": "1.0.${{ github.run_number }}",
          "description": "WebAssembly bindings for Constrained Delaunay Tetrahedrization",
          "main": "cdt.js",
          "types": "cdt.d.ts",
          "files": $FILES_ARRAY,
          "keywords": ["webassembly", "mesh", "delaunay", "tetrahedrization", "geometry", "cdt"],
          "author": "CDT Contributors",
          "license": "LGPL-3.0",
          "repository": {
            "type": "git",
            "url": "https://github.com/zalo/CDT.git"
          },
          "homepage": "https://github.com/zalo/CDT",
          "engines": {
            "node": ">=14.0.0"
          }
        }
        EOF
        
        # Create README for the package
        cat > dist/README.md << 'EOF'
        # CDT WebAssembly Bindings
        
        WebAssembly bindings for the CDT (Constrained Delaunay Tetrahedrization) library.
        
        ## Usage
        
        ```javascript
        import CDT from 'cdt-wasm';
        
        // Example: tetrahedralize a cube
        const vertices = [
          0, 0, 0,  // vertex 0
          1, 0, 0,  // vertex 1  
          1, 1, 0,  // vertex 2
          0, 1, 0,  // vertex 3
          0, 0, 1,  // vertex 4
          1, 0, 1,  // vertex 5
          1, 1, 1,  // vertex 6
          0, 1, 1   // vertex 7
        ];
        
        const triangles = [
          0, 1, 2, 2, 3, 0,  // bottom face
          4, 7, 6, 6, 5, 4,  // top face
          0, 4, 5, 5, 1, 0,  // front face
          2, 6, 7, 7, 3, 2,  // back face
          0, 3, 7, 7, 4, 0,  // left face
          1, 5, 6, 6, 2, 1   // right face
        ];
        
        const result = CDT.computeCDT(vertices, triangles);
        
        if (result.success) {
          console.log('Tetrahedrization succeeded!');
          console.log(`Generated ${result.numTetrahedra} tetrahedra`);
          console.log(`Added ${result.numSteinerVertices} Steiner points`);
        }
        ```
        
        ## API
        
        See the TypeScript definitions in `cdt.d.ts` for complete API documentation.
        EOF
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: always()  # Upload artifacts even if tests fail
      with:
        name: cdt-wasm-${{ github.sha }}
        path: dist/

    - name: Install Node Modules
      run: npm install
    # Switching the HTML entrypoint over to the build
    - name: Pre-Process Site
      run: |
        sed -e 's/\/demo-src\//\/demo-build\//g' index.html > index.html.tmp
        mv index.html.tmp index.html
        mkdir -p demo-build
        cp dist/cdt.js demo-src/cdt.js
    - name: Run esbuild
      run: npm run build
    - name: Clean up cache folders
      run: |
        rm -rf ./emsdk-cache
    - name: Setup Pages
      uses: actions/configure-pages@v4
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        # Upload entire repository
        path: '.'
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
        
  build-native:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Native Version
      run: |
        mkdir -p build-native
        cd build-native
        cmake .. -DLGPL=ON
        make -j4
        
    - name: Test Native Binary
      run: |
        cd build-native
        ./cdt --help || true  # Show help message
        echo "✓ Native binary built successfully"
